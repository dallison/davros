#include "md5.h"
#include "absl/strings/str_format.h"
#include <array>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <vector>

// This was mostly generated by AI.  It wasn't perfect, but it seems to work
// after fixing the obvious issues.
namespace neutron {
namespace {
const std::array<uint32_t, 64> k = {
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a,
    0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
    0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821, 0xf61e2562, 0xc040b340,
    0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8,
    0x676f02d9, 0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
    0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70, 0x289b7ec6, 0xeaa127fa,
    0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92,
    0xffeff47d, 0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
    0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};

const std::array<uint32_t, 16> s = {7, 12, 17, 22, 5, 9,  14, 20,
                                    4, 11, 16, 23, 6, 10, 15, 21};

uint32_t LeftRotate(uint32_t x, uint32_t c) {
  return (x << c) | (x >> (32 - c));
}

void Md5Transform(uint32_t state[4], const uint8_t block[64]) {
  uint32_t a = state[0], b = state[1], c = state[2], d = state[3], f, g, temp;
  uint32_t x[16];

  for (int i = 0; i < 16; ++i) {
    x[i] = (block[i * 4]) | (block[i * 4 + 1] << 8) | (block[i * 4 + 2] << 16) |
           (block[i * 4 + 3] << 24);
  }

  for (int i = 0; i < 64; ++i) {
    if (i < 16) {
      f = (b & c) | (~b & d);
      g = i;
    } else if (i < 32) {
      f = (d & b) | (~d & c);
      g = (5 * i + 1) % 16;
    } else if (i < 48) {
      f = b ^ c ^ d;
      g = (3 * i + 5) % 16;
    } else {
      f = c ^ (b | ~d);
      g = (7 * i) % 16;
    }

    temp = d;
    d = c;
    c = b;
    b = b + LeftRotate(a + f + k[i] + x[g], s[i % 4 + (i / 16) * 4]);
    a = temp;
  }

  state[0] += a;
  state[1] += b;
  state[2] += c;
  state[3] += d;
}

void Md5Update(uint32_t state[4], uint64_t &bitCount, uint8_t buffer[64],
               const uint8_t *input, size_t len) {
  size_t i = 0, index = bitCount / 8 % 64;

  bitCount += len * 8;

  size_t partLen = 64 - index;

  if (len >= partLen) {
    std::copy(input, input + partLen, buffer + index);
    Md5Transform(state, buffer);

    for (i = partLen; i + 63 < len; i += 64) {
      Md5Transform(state, input + i);
    }

    index = 0;
  }

  std::copy(input + i, input + len, buffer + index);
}

void Md5Final(uint32_t state[4], uint64_t bitCount, uint8_t buffer[64],
              uint8_t digest[16]) {
  uint8_t padding[64] = {0x80};
  uint8_t bits[8];

  for (int i = 0; i < 8; ++i) {
    bits[i] = bitCount >> (i * 8);
  }

  size_t index = bitCount / 8 % 64;
  size_t padLen = (index < 56) ? (56 - index) : (120 - index);

  Md5Update(state, bitCount, buffer, padding, padLen);
  Md5Update(state, bitCount, buffer, bits, 8);

  for (int i = 0; i < 4; ++i) {
    for (int j = 0; j < 4; ++j) {
      digest[i * 4 + j] = state[i] >> (j * 8);
    }
  }
}

std::string TrimLine(const std::string &line) {
  size_t start = 0;
  size_t end = line.size();
  // Skip leading and trailing whitespaces.
  while (start < end && std::isspace(line[start])) {
    ++start;
  }
  // Find the first comment character (#) and remove the rest of the line.
  for (size_t i = start; i < end; ++i) {
    if (line[i] == '#') {
      end = i;
      break;
    }
  }
  // Trim trailing whitespaces.
  while (end > start && std::isspace(line[end - 1])) {
    --end;
  }

  return line.substr(start, end - start);
}

} // namespace

absl::StatusOr<std::string> CalculateMD5Checksum(const std::string &filePath) {
  uint32_t state[4] = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476};
  uint64_t bitCount = 0;
  uint8_t buffer[64] = {0};
  uint8_t digest[16];

  std::ifstream file(filePath, std::ifstream::binary);
  if (!file) {
    return absl::InternalError(
        absl::StrFormat("Cannot open file: %s", filePath));
  }

  std::string line;
  while (std::getline(file, line)) {
    line = TrimLine(line);
    if (line.empty()) {
      continue;
    }
    Md5Update(state, bitCount, buffer,
              reinterpret_cast<const uint8_t *>(line.c_str()), line.size());
  }

  Md5Final(state, bitCount, buffer, digest);

  std::ostringstream result;
  for (int i = 0; i < 16; ++i) {
    result << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];
  }

  return result.str();
}

} // namespace neutron
