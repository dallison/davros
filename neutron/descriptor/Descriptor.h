// File was generated by Neutron (https://github.com/dallison/neutron)
// It's probably best not to modify it, but I can't stop you
#pragma once
#include "neutron/serdes/runtime.h"

#include "neutron/descriptor/Field.h"

namespace descriptor {
struct Descriptor {

  std::string package = {};
  std::string name = {};
  std::vector<std::string> imports = {};
  std::vector<descriptor::Field> fields = {};

  static const char* Name() { return "Descriptor"; }
  static const char* FullName() { return "descriptor/Descriptor"; }
  absl::Status SerializeToArray(char* addr, size_t len, bool compact=false) const;
  absl::Status SerializeToBuffer(neutron::serdes::Buffer& buffer, bool compact = false) const;
  absl::Status DeserializeFromArray(const char* addr, size_t len, bool compact = false);
  absl::Status DeserializeFromBuffer(neutron::serdes::Buffer& buffer, bool compact = false);
  size_t SerializedSize() const;
  size_t CompactSerializedSize() const;
  absl::Status WriteToBuffer(neutron::serdes::Buffer& buffer) const;
  absl::Status WriteCompactToBuffer(neutron::serdes::Buffer& buffer) const;
  absl::Status ReadFromBuffer(neutron::serdes::Buffer& buffer);
  absl::Status ReadCompactFromBuffer(neutron::serdes::Buffer& buffer);
  static absl::Status Expand(const neutron::serdes::Buffer& src, neutron::serdes::Buffer& dest);
  static absl::Status Compact(const neutron::serdes::Buffer& src, neutron::serdes::Buffer& dest);
  bool operator==(const Descriptor& m) const;
  bool operator!=(const Descriptor& m) const {
    return !this->operator==(m);
  }
  std::string DebugString() const;
  static constexpr unsigned char _descriptor[] = {
0x0a,0x64,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x6f,0x72,0x0a,0x44,0x65,0x73,0x63,0x72,
0x69,0x70,0x74,0x6f,0x72,0x01,0x10,0x64,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x6f,0x72,
0x2f,0x46,0x69,0x65,0x6c,0x64,0x04,0x00,0x07,0x70,0x61,0x63,0x6b,0x61,0x67,0x65,0x0b,
0x7e,0x00,0x00,0x01,0x04,0x6e,0x61,0x6d,0x65,0x0b,0x7e,0x00,0x00,0x02,0x07,0x69,0x6d,
0x70,0x6f,0x72,0x74,0x73,0x0b,0x7f,0x00,0x00,0x03,0x06,0x66,0x69,0x65,0x6c,0x64,0x73,
0x0e,0x7f,0x0a,0x64,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x6f,0x72,0x05,0x46,0x69,0x65,
0x6c,0x64
  };
};
inline std::ostream& operator<<(std::ostream& os, const Descriptor& msg) {
  os << "package: ";
  os << msg.package << std::endl;
  os << "name: ";
  os << msg.name << std::endl;
  os << "imports: ";
  for (auto& m : msg.imports) {
    os << m << std::endl;
  }
  os << "fields: ";
  for (auto& m : msg.fields) {
    os << m.DebugString();
  }
  os << std::endl;
  return os;
}
}    // namespace descriptor
